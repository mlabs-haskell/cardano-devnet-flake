{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cardano Devnet Cardano testnet for dApp development and testing locally. This is a Nix based cardano devnet, that will allow you to run a single-node testnet locally, and submit transactions to it just as any other testnet. Benefits compared to other similar solutions: language agnostic : you can use your own transaction builder, indexer regardless of the programming language. CI compatible : use the same configuration on the CI to run your tests on a real network fast : due to its simplicity, spinning up a test network is really fast. If the slot length is configured to a small value, transactions will also finish quickly no docker required : the node runs as a local executable, which means that you can easily connect to its unix socket from other utilities (this has been a problem on MacOS with docker-based solutions) works on Linux and MacOS (haven't tested Windows WSL, but it should work there as well) How to use This repository provides two ways to setup a cardano dev network, either as a flake-parts module, or a process-compose module. The former is simpler, which might be just enough for your use case, but I would recommend using the process-compose module, which allows you to configure a full development environment, similar to docker-compose. Flake parts module Process-compose module","title":"Cardano Devnet"},{"location":"#cardano-devnet","text":"Cardano testnet for dApp development and testing locally. This is a Nix based cardano devnet, that will allow you to run a single-node testnet locally, and submit transactions to it just as any other testnet. Benefits compared to other similar solutions: language agnostic : you can use your own transaction builder, indexer regardless of the programming language. CI compatible : use the same configuration on the CI to run your tests on a real network fast : due to its simplicity, spinning up a test network is really fast. If the slot length is configured to a small value, transactions will also finish quickly no docker required : the node runs as a local executable, which means that you can easily connect to its unix socket from other utilities (this has been a problem on MacOS with docker-based solutions) works on Linux and MacOS (haven't tested Windows WSL, but it should work there as well)","title":"Cardano Devnet"},{"location":"#how-to-use","text":"This repository provides two ways to setup a cardano dev network, either as a flake-parts module, or a process-compose module. The former is simpler, which might be just enough for your use case, but I would recommend using the process-compose module, which allows you to configure a full development environment, similar to docker-compose. Flake parts module Process-compose module","title":"How to use"},{"location":"flake-parts/","text":"Flake parts module Using the flake parts module is simpler, but only allows one configuration in your flake. This configuration is recommended for simple applications and I would recommend trying the process-compose module to setup a more robust development environment. Setup In your flake.nix , you will have to include the following inputs: inputs = { cardano-devnet.url = \"github:mlabs-haskell/cardano-devnet-flake\"; flake-parts.follows = \"cardano-devnet/flake-parts\"; # Use the cardano-node required by your project cardano-node.url = \"github:IntersectMBO/cardano-node/10.4.1\"; # Use any nixpkgs version (following cardano-node will reduce dependencies) nixpkgs.follows = \"cardano-node/nixpkgs\"; }; Then, we will need to make a flake with flake-parts and import the cardano-devnet flake module. See the flake-parts documentation for other configuration options. flake-parts.lib.mkFlake { inherit inputs; } { imports = [ inputs.cardano-devnet.flakeModule ]; Finally in the perSystem , we will add our cardano devnet configuration. See the cardano-devnet options page for other configuration options. With this done, the devnet will be exposed under config.packages.cardano-devnet , but it makes sense to add this to the devShell so we can execute it from the nix environment. perSystem = { pkgs, config, system, ... }: { cardano-devnet = { inherit (inputs'.cardano-node.packages) cardano-node cardano-cli; initialFunds = { \"9783be7d3c54f11377966dfabc9284cd6c32fca1cd42ef0a4f1cc45b\" = 900000000000; }; }; devShells.default = pkgs.mkShell { buildInputs = [ config.packages.cardano-devnet ]; }; }; Now we can run nix develop . and inside the dev shell, and execute cardano-devnet to start up the network. See an example setup at ./example/flake-module/flake.nix .","title":"Flake parts module"},{"location":"flake-parts/#flake-parts-module","text":"Using the flake parts module is simpler, but only allows one configuration in your flake. This configuration is recommended for simple applications and I would recommend trying the process-compose module to setup a more robust development environment.","title":"Flake parts module"},{"location":"flake-parts/#setup","text":"In your flake.nix , you will have to include the following inputs: inputs = { cardano-devnet.url = \"github:mlabs-haskell/cardano-devnet-flake\"; flake-parts.follows = \"cardano-devnet/flake-parts\"; # Use the cardano-node required by your project cardano-node.url = \"github:IntersectMBO/cardano-node/10.4.1\"; # Use any nixpkgs version (following cardano-node will reduce dependencies) nixpkgs.follows = \"cardano-node/nixpkgs\"; }; Then, we will need to make a flake with flake-parts and import the cardano-devnet flake module. See the flake-parts documentation for other configuration options. flake-parts.lib.mkFlake { inherit inputs; } { imports = [ inputs.cardano-devnet.flakeModule ]; Finally in the perSystem , we will add our cardano devnet configuration. See the cardano-devnet options page for other configuration options. With this done, the devnet will be exposed under config.packages.cardano-devnet , but it makes sense to add this to the devShell so we can execute it from the nix environment. perSystem = { pkgs, config, system, ... }: { cardano-devnet = { inherit (inputs'.cardano-node.packages) cardano-node cardano-cli; initialFunds = { \"9783be7d3c54f11377966dfabc9284cd6c32fca1cd42ef0a4f1cc45b\" = 900000000000; }; }; devShells.default = pkgs.mkShell { buildInputs = [ config.packages.cardano-devnet ]; }; }; Now we can run nix develop . and inside the dev shell, and execute cardano-devnet to start up the network. See an example setup at ./example/flake-module/flake.nix .","title":"Setup"},{"location":"options/","text":"cardano-devnet.cardano-cli The cardano-cli package to use. Type: package Default: pkgs.cardano-cli Declared by: - /nix/store/0xmlxz9pmx2874y44cz89ydc92pdvd8s-source/options.nix cardano-devnet.cardano-node The cardano-node package to use. Type: package Default: pkgs.cardano-node Declared by: - /nix/store/0xmlxz9pmx2874y44cz89ydc92pdvd8s-source/options.nix cardano-devnet.dataDir The directory where all data for cardano-devnet.<name> is stored Type: string Default: \"./data/cardano-devnet\" Declared by: - /nix/store/0xmlxz9pmx2874y44cz89ydc92pdvd8s-source/options.nix cardano-devnet.epochLength Length of an epoch in slots Type: unsigned integer, meaning >=0 Default: 5 Example: 100 Declared by: - /nix/store/0xmlxz9pmx2874y44cz89ydc92pdvd8s-source/options.nix cardano-devnet.initialFunds Wallet public key - lovelace pair, determining the initial funds. Use initialFundsKeyType define the key type you\u2019re using. Type: attribute set of (unsigned integer, meaning >=0) Example: { \"9783be7d3c54f11377966dfabc9284cd6c32fca1cd42ef0a4f1cc45b\" = 900000000000; } Declared by: - /nix/store/0xmlxz9pmx2874y44cz89ydc92pdvd8s-source/options.nix cardano-devnet.initialFundsKeyType Flag to define the keys used in initialFunds option (bech32-binary | verification-key-file | verification-key-hash) Type: string Default: \"verification-key-hash\" Example: \"bech32-binary\" Declared by: - /nix/store/0xmlxz9pmx2874y44cz89ydc92pdvd8s-source/options.nix cardano-devnet.maxBlockExUnits Maximum execution budget for a block Type: attribute set of (unsigned integer, meaning >=0) Default: { exUnitsMem = 62000000; exUnitsSteps = 40000000000; } Example: { exUnitsMem = 62000000; exUnitsSteps = 40000000000; } Declared by: - /nix/store/0xmlxz9pmx2874y44cz89ydc92pdvd8s-source/options.nix cardano-devnet.maxTxExUnits Maximum execution budget for a transaction Type: attribute set of (unsigned integer, meaning >=0) Default: { exUnitsMem = 14000000; exUnitsSteps = 10000000000; } Example: { exUnitsMem = 14000000; exUnitsSteps = 10000000000; } Declared by: - /nix/store/0xmlxz9pmx2874y44cz89ydc92pdvd8s-source/options.nix cardano-devnet.maxTxSize Transaction size in bytes Type: unsigned integer, meaning >=0 Default: 16384 Example: 20000 Declared by: - /nix/store/0xmlxz9pmx2874y44cz89ydc92pdvd8s-source/options.nix cardano-devnet.networkId Network discriminant which can be Mainnet or Testnet Type: string Default: \"Testnet\" Example: \"Mainnet\" Declared by: - /nix/store/0xmlxz9pmx2874y44cz89ydc92pdvd8s-source/options.nix cardano-devnet.networkMagic Cardano network magic id (also known as testnet magic). Type: unsigned integer, meaning >=0 Default: 42 Example: 2 Declared by: - /nix/store/0xmlxz9pmx2874y44cz89ydc92pdvd8s-source/options.nix cardano-devnet.protocolVersion Protocol major and minor version Type: attribute set of (unsigned integer, meaning >=0) Default: { major = 10; minor = 0; } Example: { major = 6; minor = 0; } Declared by: - /nix/store/0xmlxz9pmx2874y44cz89ydc92pdvd8s-source/options.nix cardano-devnet.slotLength Slot duration in seconds Type: floating point number Default: 0.1 Example: 1 Declared by: - /nix/store/0xmlxz9pmx2874y44cz89ydc92pdvd8s-source/options.nix","title":"Options"},{"location":"options/#cardano-devnetcardano-cli","text":"The cardano-cli package to use. Type: package Default: pkgs.cardano-cli Declared by: - /nix/store/0xmlxz9pmx2874y44cz89ydc92pdvd8s-source/options.nix","title":"cardano-devnet.cardano-cli"},{"location":"options/#cardano-devnetcardano-node","text":"The cardano-node package to use. Type: package Default: pkgs.cardano-node Declared by: - /nix/store/0xmlxz9pmx2874y44cz89ydc92pdvd8s-source/options.nix","title":"cardano-devnet.cardano-node"},{"location":"options/#cardano-devnetdatadir","text":"The directory where all data for cardano-devnet.<name> is stored Type: string Default: \"./data/cardano-devnet\" Declared by: - /nix/store/0xmlxz9pmx2874y44cz89ydc92pdvd8s-source/options.nix","title":"cardano-devnet.dataDir"},{"location":"options/#cardano-devnetepochlength","text":"Length of an epoch in slots Type: unsigned integer, meaning >=0 Default: 5 Example: 100 Declared by: - /nix/store/0xmlxz9pmx2874y44cz89ydc92pdvd8s-source/options.nix","title":"cardano-devnet.epochLength"},{"location":"options/#cardano-devnetinitialfunds","text":"Wallet public key - lovelace pair, determining the initial funds. Use initialFundsKeyType define the key type you\u2019re using. Type: attribute set of (unsigned integer, meaning >=0) Example: { \"9783be7d3c54f11377966dfabc9284cd6c32fca1cd42ef0a4f1cc45b\" = 900000000000; } Declared by: - /nix/store/0xmlxz9pmx2874y44cz89ydc92pdvd8s-source/options.nix","title":"cardano-devnet.initialFunds"},{"location":"options/#cardano-devnetinitialfundskeytype","text":"Flag to define the keys used in initialFunds option (bech32-binary | verification-key-file | verification-key-hash) Type: string Default: \"verification-key-hash\" Example: \"bech32-binary\" Declared by: - /nix/store/0xmlxz9pmx2874y44cz89ydc92pdvd8s-source/options.nix","title":"cardano-devnet.initialFundsKeyType"},{"location":"options/#cardano-devnetmaxblockexunits","text":"Maximum execution budget for a block Type: attribute set of (unsigned integer, meaning >=0) Default: { exUnitsMem = 62000000; exUnitsSteps = 40000000000; } Example: { exUnitsMem = 62000000; exUnitsSteps = 40000000000; } Declared by: - /nix/store/0xmlxz9pmx2874y44cz89ydc92pdvd8s-source/options.nix","title":"cardano-devnet.maxBlockExUnits"},{"location":"options/#cardano-devnetmaxtxexunits","text":"Maximum execution budget for a transaction Type: attribute set of (unsigned integer, meaning >=0) Default: { exUnitsMem = 14000000; exUnitsSteps = 10000000000; } Example: { exUnitsMem = 14000000; exUnitsSteps = 10000000000; } Declared by: - /nix/store/0xmlxz9pmx2874y44cz89ydc92pdvd8s-source/options.nix","title":"cardano-devnet.maxTxExUnits"},{"location":"options/#cardano-devnetmaxtxsize","text":"Transaction size in bytes Type: unsigned integer, meaning >=0 Default: 16384 Example: 20000 Declared by: - /nix/store/0xmlxz9pmx2874y44cz89ydc92pdvd8s-source/options.nix","title":"cardano-devnet.maxTxSize"},{"location":"options/#cardano-devnetnetworkid","text":"Network discriminant which can be Mainnet or Testnet Type: string Default: \"Testnet\" Example: \"Mainnet\" Declared by: - /nix/store/0xmlxz9pmx2874y44cz89ydc92pdvd8s-source/options.nix","title":"cardano-devnet.networkId"},{"location":"options/#cardano-devnetnetworkmagic","text":"Cardano network magic id (also known as testnet magic). Type: unsigned integer, meaning >=0 Default: 42 Example: 2 Declared by: - /nix/store/0xmlxz9pmx2874y44cz89ydc92pdvd8s-source/options.nix","title":"cardano-devnet.networkMagic"},{"location":"options/#cardano-devnetprotocolversion","text":"Protocol major and minor version Type: attribute set of (unsigned integer, meaning >=0) Default: { major = 10; minor = 0; } Example: { major = 6; minor = 0; } Declared by: - /nix/store/0xmlxz9pmx2874y44cz89ydc92pdvd8s-source/options.nix","title":"cardano-devnet.protocolVersion"},{"location":"options/#cardano-devnetslotlength","text":"Slot duration in seconds Type: floating point number Default: 0.1 Example: 1 Declared by: - /nix/store/0xmlxz9pmx2874y44cz89ydc92pdvd8s-source/options.nix","title":"cardano-devnet.slotLength"},{"location":"process-compose/","text":"Process-compose module Process-compose is a utility to orchestrate multiple processes, similarly to the way docker-compose does this with docker containers. Process-compose handles configuring health checks, dependencies between processes, retries, etc. Process-compose-flake wraps the above utiliy to integrate it with Nix, using flake-parts. This process-compose module was built based on services-flake , following the same conventions where possible. Cardano devnet is compatible with services-flake, you can use mix services from both in one configuration. Setup In your flake.nix , you will have to include the following inputs: inputs = { cardano-devnet.url = \"github:mlabs-haskell/cardano-devnet-flake\"; flake-parts.follows = \"cardano-devnet/flake-parts\"; # We will need to include process-compose-flake process-compose.url = \"github:Platonic-Systems/process-compose-flake\"; # Use the cardano-node required by your project cardano-node.url = \"github:IntersectMBO/cardano-node/10.1.4\"; # Use any nixpkgs version (following cardano-node will reduce dependencies) nixpkgs.follows = \"cardano-node/nixpkgs\"; }; Then, we will need to make a flake with flake-parts and import the process-compose flake module. See the flake-parts documentation for other configuration options. flake-parts.lib.mkFlake { inherit inputs; } { imports = [ inputs.process-compose.flakeModule ]; } After this, we can setup a process-compose. This is where we can import the cardano-devnet process compose module, and add the devnet configuration under services.cardano-devnet . See the cardano-devnet options page for other configuration options. process-compose.\"process-compose-example\" = { imports = [ inputs.cardano-devnet.processComposeModule ]; services.cardano-devnet.\"devnet\" = { inherit (inputs.cardano-node.packages.${system}) cardano-node cardano-cli; enable = true; initialFunds = { \"9783be7d3c54f11377966dfabc9284cd6c32fca1cd42ef0a4f1cc45b\" = 900000000000; }; }; }; Now we can add the process-compose executable to our devShell: devShells.default = pkgs.mkShell { nativeBuildInputs = [ self'.packages.\"process-compose-example\" ]; }; See an example setup at ./example/process-compose-module/flake.nix .","title":"Process-compose module"},{"location":"process-compose/#process-compose-module","text":"Process-compose is a utility to orchestrate multiple processes, similarly to the way docker-compose does this with docker containers. Process-compose handles configuring health checks, dependencies between processes, retries, etc. Process-compose-flake wraps the above utiliy to integrate it with Nix, using flake-parts. This process-compose module was built based on services-flake , following the same conventions where possible. Cardano devnet is compatible with services-flake, you can use mix services from both in one configuration.","title":"Process-compose module"},{"location":"process-compose/#setup","text":"In your flake.nix , you will have to include the following inputs: inputs = { cardano-devnet.url = \"github:mlabs-haskell/cardano-devnet-flake\"; flake-parts.follows = \"cardano-devnet/flake-parts\"; # We will need to include process-compose-flake process-compose.url = \"github:Platonic-Systems/process-compose-flake\"; # Use the cardano-node required by your project cardano-node.url = \"github:IntersectMBO/cardano-node/10.1.4\"; # Use any nixpkgs version (following cardano-node will reduce dependencies) nixpkgs.follows = \"cardano-node/nixpkgs\"; }; Then, we will need to make a flake with flake-parts and import the process-compose flake module. See the flake-parts documentation for other configuration options. flake-parts.lib.mkFlake { inherit inputs; } { imports = [ inputs.process-compose.flakeModule ]; } After this, we can setup a process-compose. This is where we can import the cardano-devnet process compose module, and add the devnet configuration under services.cardano-devnet . See the cardano-devnet options page for other configuration options. process-compose.\"process-compose-example\" = { imports = [ inputs.cardano-devnet.processComposeModule ]; services.cardano-devnet.\"devnet\" = { inherit (inputs.cardano-node.packages.${system}) cardano-node cardano-cli; enable = true; initialFunds = { \"9783be7d3c54f11377966dfabc9284cd6c32fca1cd42ef0a4f1cc45b\" = 900000000000; }; }; }; Now we can add the process-compose executable to our devShell: devShells.default = pkgs.mkShell { nativeBuildInputs = [ self'.packages.\"process-compose-example\" ]; }; See an example setup at ./example/process-compose-module/flake.nix .","title":"Setup"}]}